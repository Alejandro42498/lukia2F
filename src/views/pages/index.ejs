<!doctype html>
<html lang="es">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Mercado Cripto â€” BTC & ETH</title>

  <!-- Bootstrap 5 -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">

  <!-- Bootstrap Icons -->
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css">

  <!-- Chart.js -->
  <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.1/dist/chart.umd.min.js"></script>

  <style>
    :root {
      --bg: #0f172a;
      --card: #0b1220;
      --card-header: #111827;
      --text: #e2e8f0;
      --sub: #94a3b8;
      --grid: rgba(148,163,184,.12);
      --up: #16a34a;
      --down: #dc2626;
      --btc: #f7931a;
      --eth: #627eea;
    }
    body { background: var(--bg); color: var(--text); font-family: "Inter", sans-serif; }
    .brand { font-weight: 800; letter-spacing: .5px; }
    .sub { color: var(--sub); }

    .card { border: 0; border-radius: 1rem; overflow: hidden; background: var(--card); }
    .card-header { background: var(--card-header); color: #e5e7eb; }
    .price { font-size: clamp(1.6rem, 3vw, 2.4rem); font-weight: 800; opacity: .95; color: #ffffff }
    .badge-up { background-color: var(--up) !important; }
    .badge-down { background-color: var(--down) !important; }
    .footer-note { color: var(--sub); }
    .skeleton {
      height: 300px; width: 100%;
      background: linear-gradient(90deg, rgba(255,255,255,.06) 25%, rgba(255,255,255,.10) 37%, rgba(255,255,255,.06) 63%);
      background-size: 400% 100%; border-radius: .75rem;
      animation: shimmer 1.4s infinite ease-in-out;
    }
    @keyframes shimmer { 0%{background-position:100% 0} 100%{background-position:-100% 0} }
    canvas { width: 100% !important; height: 300px !important; }

    /* mini iconos */
    .coin {
      width: 26px; height: 26px; border-radius: 50%;
      display: inline-flex; align-items: center; justify-content: center;
      background: #fff; color: #000; font-weight: 900;
    }
  </style>
</head>
<body>
  <div class="container py-4 py-md-5">

    <!-- ðŸ”¹ Header con botÃ³n de inicio de sesiÃ³n -->
    <div class="d-flex align-items-center justify-content-between mb-4">
      <h1 class="h3 m-0 brand">Lukia2</h1>

      <div class="d-flex align-items-center gap-3">
        <div class="text-end me-2">
          <div class="small sub">Ãšltima actualizaciÃ³n</div>
          <div class="small" id="last-updated"><%= updatedAt ? new Date(updatedAt).toLocaleString() : 'â€”' %></div>
        </div>

        <a href="/login" class="btn btn-outline-light btn-sm px-3">
          <i class="bi bi-person-circle me-1"></i> Iniciar sesiÃ³n
        </a>
      </div>
    </div>

    <% if (error) { %>
      <div class="alert alert-danger"><%= error %></div>
    <% } else if (!market) { %>
      <div class="text-center py-5">Cargando datos...</div>
    <% } else { %>

      <div class="row g-4">

        <!-- ===== BTC ===== -->
        <div class="col-12 col-md-6">
          <div class="card shadow-lg">
            <div class="card-header d-flex align-items-center justify-content-between">
              <div class="d-flex align-items-center gap-2">
                <span class="coin" style="color:#fff;background:var(--btc)">â‚¿</span>
                <strong>Bitcoin</strong><span class="sub"> (BTC)</span>
              </div>
              <% const btcChange = Number(market?.cryptos?.bitcoin?.usd_24h_change ?? 0); %>
              <span id="badge-btc" class="badge <%= btcChange >= 0 ? 'badge-up' : 'badge-down' %>">
                <%= btcChange.toFixed(2) %>% 24h
              </span>
            </div>
            <div class="card-body">
              <div class="d-flex align-items-end justify-content-between mb-3">
                <div>
                  <div class="sub">Precio USD</div>
                  <div id="btc-usd" class="price">
                    $<%= Number(market?.cryptos?.bitcoin?.usd ?? 0).toLocaleString() %>
                  </div>
                </div>
                <div class="text-end">
                  <div class="sub">Precio COP</div>
                  <div id="btc-cop" class="price">
                    $<%= Number(market?.cryptos?.bitcoin?.cop ?? 0).toLocaleString() %>
                  </div>
                </div>
              </div>
              <div id="wrap-btc">
                <canvas id="chart-btc"></canvas>
              </div>
            </div>
          </div>
        </div>

        <!-- ===== ETH ===== -->
        <div class="col-12 col-md-6">
          <div class="card shadow-lg">
            <div class="card-header d-flex align-items-center justify-content-between">
              <div class="d-flex align-items-center gap-2">
                <span class="coin" style="color:#fff;background:var(--eth)">â—†</span>
                <strong>Ethereum</strong><span class="sub"> (ETH)</span>
              </div>
              <% const ethChange = Number(market?.cryptos?.ethereum?.usd_24h_change ?? 0); %>
              <span id="badge-eth" class="badge <%= ethChange >= 0 ? 'badge-up' : 'badge-down' %>">
                <%= ethChange.toFixed(2) %>% 24h
              </span>
            </div>
            <div class="card-body">
              <div class="d-flex align-items-end justify-content-between mb-3">
                <div>
                  <div class="sub">Precio USD</div>
                  <div id="eth-usd" class="price">
                    $<%= Number(market?.cryptos?.ethereum?.usd ?? 0).toLocaleString() %>
                  </div>
                </div>
                <div class="text-end">
                  <div class="sub">Precio COP</div>
                  <div id="eth-cop" class="price">
                    $<%= Number(market?.cryptos?.ethereum?.cop ?? 0).toLocaleString() %>
                  </div>
                </div>
              </div>
              <div id="wrap-eth">
                <canvas id="chart-eth"></canvas>
              </div>
            </div>
          </div>
        </div>

      </div>

      <div class="mt-4 text-center footer-note">
        Fuente: CoinGecko / Binance (precios en tiempo casi real, 24h de historial).
      </div>

    <% } %>
  </div>

  <script>
    // ===== Helpers =====
    const fmtUSD = new Intl.NumberFormat('en-US', { maximumFractionDigits: 2 });
    const fmtCOP = new Intl.NumberFormat('es-CO');

    function toSeries(arr) {
      if (!Array.isArray(arr) || !arr.length) return { labels: [], data: [] };
      const labels = arr.map(p => new Date(p[0]).toLocaleTimeString());
      const data = arr.map(p => Number(p[1])).filter(n => isFinite(n));
      return { labels, data };
    }

    function makeLineChart(ctx, labels, data, color, title) {
      const gradient = ctx.createLinearGradient(0, 0, 0, 300);
      gradient.addColorStop(0, color + 'AA');
      gradient.addColorStop(1, color + '00');
      return new Chart(ctx, {
        type: 'line',
        data: {
          labels,
          datasets: [{
            label: title,
            data,
            borderColor: color,
            backgroundColor: gradient,
            fill: true,
            tension: 0.35,
            borderWidth: 2,
            pointRadius: 0
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          plugins: {
            legend: { display: false },
            tooltip: { mode: 'index', intersect: false }
          },
          scales: {
            x: { ticks: { color: '#9ca3af' }, grid: { color: 'var(--grid)' } },
            y: { ticks: { color: '#9ca3af' }, grid: { color: 'var(--grid)' } }
          }
        }
      });
    }

    const MARKET = <%- JSON.stringify(market || {}) %>;
    const CHARTS = <%- JSON.stringify(charts || {}) %>;

    let btcChart, ethChart;

    (function initCharts() {
      const btcArr = CHARTS?.bitcoin?.usd || [];
      const ethArr = CHARTS?.ethereum?.usd || [];

      if (!btcArr.length) document.getElementById('wrap-btc').innerHTML = '<div class="skeleton"></div>';
      if (!ethArr.length) document.getElementById('wrap-eth').innerHTML = '<div class="skeleton"></div>';

      if (btcArr.length) {
        const btc = toSeries(btcArr);
        const ctxB = document.getElementById('chart-btc').getContext('2d');
        btcChart = makeLineChart(ctxB, btc.labels, btc.data, getComputedStyle(document.documentElement).getPropertyValue('--btc').trim(), 'BTC/USD 24h');
      }
      if (ethArr.length) {
        const eth = toSeries(ethArr);
        const ctxE = document.getElementById('chart-eth').getContext('2d');
        ethChart = makeLineChart(ctxE, eth.labels, eth.data, getComputedStyle(document.documentElement).getPropertyValue('--eth').trim(), 'ETH/USD 24h');
      }
    })();

    async function refreshData() {
      try {
        const res = await fetch('/api/market', { cache: 'no-store' });
        const json = await res.json();
        if (!json.ok) return;

        const m = json.market;
        document.getElementById('last-updated').textContent = new Date(m.fetchedAt).toLocaleString();

        const bUsd = Number(m.cryptos?.bitcoin?.usd ?? NaN);
        const bCop = Number(m.cryptos?.bitcoin?.cop ?? NaN);
        const eUsd = Number(m.cryptos?.ethereum?.usd ?? NaN);
        const eCop = Number(m.cryptos?.ethereum?.cop ?? NaN);

        if (isFinite(bUsd)) document.getElementById('btc-usd').textContent = '$' + fmtUSD.format(bUsd);
        if (isFinite(bCop)) document.getElementById('btc-cop').textContent = '$' + fmtCOP.format(bCop);
        if (isFinite(eUsd)) document.getElementById('eth-usd').textContent = '$' + fmtUSD.format(eUsd);
        if (isFinite(eCop)) document.getElementById('eth-cop').textContent = '$' + fmtCOP.format(eCop);

        const bchg = Number(m.cryptos?.bitcoin?.usd_24h_change ?? 0);
        const echg = Number(m.cryptos?.ethereum?.usd_24h_change ?? 0);
        const badgeBTC = document.getElementById('badge-btc');
        const badgeETH = document.getElementById('badge-eth');
        if (badgeBTC) {
          badgeBTC.textContent = `${bchg.toFixed(2)}% 24h`;
          badgeBTC.classList.toggle('badge-up', bchg >= 0);
          badgeBTC.classList.toggle('badge-down', bchg < 0);
        }
        if (badgeETH) {
          badgeETH.textContent = `${echg.toFixed(2)}% 24h`;
          badgeETH.classList.toggle('badge-up', echg >= 0);
          badgeETH.classList.toggle('badge-down', echg < 0);
        }

        const btcArr = json.charts?.bitcoin?.usd || [];
        const ethArr = json.charts?.ethereum?.usd || [];

        if (btcArr.length) {
          const btc = toSeries(btcArr);
          btcChart.data.labels = btc.labels;
          btcChart.data.datasets[0].data = btc.data;
          btcChart.update();
        }

        if (ethArr.length) {
          const eth = toSeries(ethArr);
          ethChart.data.labels = eth.labels;
          ethChart.data.datasets[0].data = eth.data;
          ethChart.update();
        }

      } catch (e) {
        console.error('Refresh error:', e);
      }
    }
    setInterval(refreshData, 90 * 1000);
  </script>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
